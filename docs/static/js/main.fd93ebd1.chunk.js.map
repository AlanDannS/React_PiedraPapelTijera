{"version":3,"sources":["Opciones.js","Tablero.js","index.js"],"names":["Opciones","jugador","turno","ganador","actualizar","a","axios","post","acElemento","elemento","className","map","opcion","i","clase","icon","onClick","console","log","Tablero","useState","setJugador","setOpcion","peticionGet","get","respuesta","data","eleccion","j","useEffect","setTimeout","jug","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+PA+DeA,EA5DE,SAAC,GAAgC,IAA/BC,EAA8B,EAA9BA,QAASC,EAAqB,EAArBA,MAAOC,EAAc,EAAdA,QAIzBC,EAAU,uCAAG,WAAOH,EAASC,GAAhB,SAAAG,EAAA,sEACTC,IAAMC,KAAN,4DAAgEN,EAAhE,kBAAiFC,IADxE,2CAAH,wDAIVM,EAAU,uCAAG,WAAOP,EAASQ,GAAhB,SAAAJ,EAAA,sEACTC,IAAMC,KAAN,4DAAgEN,EAAhE,kBAAiFQ,IADxE,2CAAH,wDAsBhB,OAEI,qBAAKC,UAAU,WAAf,SAKY,GAAPR,EAnCQ,CAAC,OAAQ,QAAS,YAqCdS,KAAI,SAACC,EAAQC,GAClB,IAAIC,EAAQ,cAAcF,EACtBG,EAAO,eAAeH,EAC1B,OAAO,wBAECF,UAAWI,EACXE,QAAS,kBAjCZP,EAiC4BG,EAhCjC,KAATX,IACCG,EAAW,EAAE,GACbA,EAAW,EAAE,GACbI,EAAW,EAAEC,GACbQ,QAAQC,IAAIf,SAGJ,KAATF,IACCG,EAAW,EAAE,GACbA,EAAW,EAAE,GACbI,EAAW,EAAEC,GACbQ,QAAQC,IAAIf,KAZA,IAACM,GA8BE,SAIC,mBAAGC,UAAWK,KAHTF,MAUjB,oBAAIH,UAAU,SAAd,gCCqEDS,EAzHC,WAEZ,MAA8BC,mBAAS,IAAvC,mBAAOnB,EAAP,KAAgBoB,EAAhB,KAEA,EAA4BD,qBAA5B,mBAAOR,EAAP,KAAeU,EAAf,KAGMd,EAAU,uCAAG,sBAAAH,EAAA,sEACTC,IAAMC,KAAN,8DADS,uBAITD,IAAMC,KAAN,8DAJS,uBAOTD,IAAMC,KAAN,+DAPS,uBAUTD,IAAMC,KAAN,+DAVS,2CAAH,qDAkBVgB,EAAW,uCAAG,8BAAAlB,EAAA,sEACQC,IAAMkB,IAAI,kCADlB,OACVC,EADU,OAERC,EAASD,EAATC,KACRL,EAAWK,GACXC,IAJgB,2CAAH,qDAQXA,EAAW,WACb,IAAIA,EAAW,GAEf1B,EAAQU,KAAI,SAACiB,EAAGf,GACZc,EAASd,GAAGe,EAAED,YAElBL,EAAUK,IA0Cd,OAPAE,qBAAU,WACNC,YAAW,WACPP,MACF,QACH,CAACtB,IAIA,sBAAKS,UAAU,UAAf,UAGKT,EAAQU,KAAI,SAACoB,EAAKlB,GACf,OACI,sBAAKH,UAAU,UAAf,UACI,0CAAaqB,EAAI9B,WACjB,cAAC,EAAD,CACAA,QAAS8B,EAAI9B,QACbC,MAAO6B,EAAI7B,UAJeW,MAStC,sBAAKH,UAAU,cAAf,WApDAE,GAGgB,IAAXA,EAAO,IAAqB,IAAXA,EAAO,GA0DpB,uBAFA,6BA9CG,QAAbA,EAAO,IAA6B,YAAbA,EAAO,IACjB,YAAbA,EAAO,IAAiC,SAAbA,EAAO,IACrB,SAAbA,EAAO,IAA8B,QAAbA,EAAO,GAFwB,qBAI1C,QAAbA,EAAO,IAA6B,YAAbA,EAAO,IACjB,YAAbA,EAAO,IAAiC,SAAbA,EAAO,IACrB,SAAbA,EAAO,IAA8B,QAAbA,EAAO,GAFwB,qBAI1C,QAAbA,EAAO,IAA6B,QAAbA,EAAO,IACjB,YAAbA,EAAO,IAAiC,YAAbA,EAAO,IACrB,SAAbA,EAAO,IAA8B,SAAbA,EAAO,GAFoB,cAEtD,IAyCQ,wBACIF,UAAU,eACVM,QAAS,WACLR,KAHR,8BC3GhBwB,IAASC,OACP,eAAC,IAAMC,WAAP,WACA,wDACE,cAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.fd93ebd1.chunk.js","sourcesContent":["import React from 'react'\nimport axios from 'axios';\n//Opciones recibe mediante props jugador, turno, ganador\nconst Opciones = ({jugador ,turno, ganador }) => {\n    //opciones es un arreglo que nos ayudara a generar los botones del juego\n    const opciones = [\"rock\", \"paper\", \"scissors\"];\n    //Actualizar manda una actualizacion a la bd en este caso del turno del jugador \n    const actualizar = async (jugador, turno) => {\n        await axios.post(`https://api-ppt.herokuapp.com/?METHOD=PUT&jugador=${jugador}&turno=${turno}`);\n    }\n    //AcElemento es una funcion que nos permite actualizar el elemento seleccionado por el jugador\n    const acElemento = async (jugador, elemento) => {\n        await axios.post(`https://api-ppt.herokuapp.com/?METHOD=PUT&jugador=${jugador}&value=${elemento}`);\n    }\n    //La opcion handleValue nos permite llamar a la funcion actualizar para poder modificar los turnos y las elecciones de cada jugador\n    const handleValue = (elemento) => {\n        if(jugador==\"1\"){\n            actualizar(1,0);\n            actualizar(2,1);\n            acElemento(1,elemento);\n            console.log(ganador);\n        }\n\n        if(jugador==\"2\"){\n            actualizar(1,0);\n            actualizar(2,0);\n            acElemento(2,elemento);\n            console.log(ganador);\n        }        \n\n    }\n\n\n    return (\n        \n        <div className=\"opciones\">\n        {/*Este operador ternario nos permite evaluar el turno del jugador para habilitar las opciones\n            mientras que el map que se le hace a opciones nos permite mostrar las 3 opciones de los botones\n            y tambien generar las clases para los estilos de las opciones.*/}\n        {\n            (turno==1) ?\n            (\n                opciones.map((opcion, i) => {\n                    let clase = \"btn opcion-\"+opcion;\n                    let icon = \"far fa-hand-\"+opcion;\n                    return <button\n                            key={i} \n                            className={clase} \n                            onClick={()=>handleValue(opcion)}>\n                            <i className={icon}></i>\n                            </button> \n                })  \n\n            )\n            :\n            (\n                <h3 className=\"espera\">Espera tu turno</h3>\n            )\n        }\n        </div>\n    )\n}\n\nexport default Opciones\n","import React, { useState, useEffect } from \"react\";\nimport Opciones from \"./Opciones\";\nimport axios from \"axios\";\n\nconst Tablero = () => {\n    //Dentro del state jugador guardaremos la informacion traida desde el API que consulta a la DB\n    const [jugador, setJugador] = useState([]);\n    //Dentro del state opcion almacenamos las elecciones de ambos jugadores para evaluarlas posteriormente\n    const [opcion, setOpcion] = useState();\n\n    //La funcion acElemento realiza multiples envios al API que se encargaran de devolver las opciones a su estado inicial \n    const acElemento = async () => {\n        await axios.post(\n            `https://api-ppt.herokuapp.com/?METHOD=PUT&jugador=1&value=`\n        );\n        await axios.post(\n            `https://api-ppt.herokuapp.com/?METHOD=PUT&jugador=2&value=`\n        );\n        await axios.post(\n            `https://api-ppt.herokuapp.com/?METHOD=PUT&jugador=1&turno=1`\n        );\n        await axios.post(\n            `https://api-ppt.herokuapp.com/?METHOD=PUT&jugador=2&turno=0`\n        );\n    };\n\n    /*La funcion peticionGet se encarga de realizar un call al api para traer la informacion de este y llenar el state jugador\n        tambien se encarga de llamar a la funcion eleccion que llenara el state opcion.\n    */\n    const peticionGet = async () => {\n        const respuesta = await axios.get(\"https://api-ppt.herokuapp.com/\");\n        const { data } = respuesta;\n        setJugador(data);\n        eleccion();\n    };     \n    \n    //La funcion coleccion es la encargada de llenar el state opcion.\n    const eleccion = () =>{\n        let eleccion = [];\n        //Hacemos un map a jugador para poder extraer los valores de este, acumularlos en eleccion y llenar opcion\n        jugador.map((j, i)=>{\n            eleccion[i]=j.eleccion\n        })\n        setOpcion(eleccion)\n    };\n    //Esta funcion evalua si opcion tiene informacion o si a algun jugador le falta jugar para poder liberar el resultado de la partida\n    const resultado = () =>{\n        //Si el arreglo esta vacio returna false\n        if(!opcion){\n            return false;\n            //si opcion tiene 1 campo vacio regresara false\n        }else if(opcion[0]==\"\" || opcion[1]==\"\"){\n            return false;\n        }\n        //Si no cumple con alguna condicion anterior retornara true\n        return true;\n    };\n\n\n    //Esta funcion evalua los resultadoos para poder determinar si el ganador es el jugador 1 ,2 o es un empate \n    const rstd =  () =>{\n        if(opcion[0] == 'rock' && opcion[1] == 'scissors'){return \"Ganador: Jugador 1\"}\n        if(opcion[0] == 'scissors' && opcion[1] == 'paper'){return \"Ganador: Jugador 1\"}\n        if(opcion[0] == 'paper' && opcion[1] == 'rock'){return \"Ganador: Jugador 1\"}\n\n        if(opcion[1] == 'rock' && opcion[0] == 'scissors'){return \"Ganador: Jugador 2\"}\n        if(opcion[1] == 'scissors' && opcion[0] == 'paper'){return \"Ganador: Jugador 2\"}\n        if(opcion[1] == 'paper' && opcion[0] == 'rock'){return \"Ganador: Jugador 2\"}\n\n        if(opcion[1] == 'rock' && opcion[0] == 'rock'){return \"Empate\"}\n        if(opcion[1] == 'scissors' && opcion[0] == 'scissors'){return \"Empate\"}\n        if(opcion[1] == 'paper' && opcion[0] == 'paper'){return \"Empate\"}\n\n\n        \n    }\n\n    //UseEffect actualiza la informacion de los componentes cada que exista una alteracion al state jugador\n    useEffect(() => {\n        setTimeout(()=>{\n            peticionGet();\n        },2500);\n    }, [jugador]);\n\n    //Regresa el componente de tablero que nos permite visualizar ambos tableros de juego\n    return (\n        <div className=\"tablero\">\n\n            {/*Hacemos un map a jugador para nos muestre los dos jugadores e indicar a que jugador le toca tirar*/}\n            {jugador.map((jug, i) => {\n                return (\n                    <div className=\"tarjeta\" key={i}>\n                        <h3>Jugador {jug.jugador}</h3>\n                        <Opciones \n                        jugador={jug.jugador} \n                        turno={jug.turno}\n                        />\n                    </div>\n                );\n            })}\n            <div className=\"content-btn\">\n\n            {/*Evaluamos si resultado es true o false si es true nos muestra el resultado de quien gano la partida\n            y si resultado es true retorna el mensaje con el ganador*/}\n                {\n                    (resultado()) ?\n                    \n                    (<h3>{rstd()}</h3>)\n                    :\n                    (<h3></h3>)\n                }\n                {/*El boton Reiniciar llama a la funcion acElemento para poder reiniciar los valores de la bd al darle click*/}\n                <button\n                    className=\"btn-reinicio\"\n                    onClick={() => {\n                        acElemento();\n                    }}\n                >\n                    Reiniciar\n                </button>\n            </div>\n        </div>\n    );\n};\n\nexport default Tablero;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Tablero from './Tablero';\n\nReactDOM.render(\n  <React.StrictMode>\n  <h1>PIEDRA, PAPEL O TIJERA</h1>\n    <Tablero/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}